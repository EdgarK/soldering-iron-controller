;/*****************************************************
;This program was produced by the
;CodeWizardAVR V2.04.4a Advanced
;Automatic Program Generator
;© Copyright 1998-2009 Pavel Haiduc, HP InfoTech s.r.l.
;http://www.hpinfotech.com
;
;Project :
;Version :
;Date    : 3/8/2015
;Author  : NeVaDa
;Company : banana-electronics
;Comments:
;
;
;Chip type               : ATtiny2313
;AVR Core Clock frequency: 8.000000 MHz
;Memory model            : Tiny
;External RAM size       : 0
;Data Stack size         : 32
;*****************************************************/
;
;#include <tiny2313.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x20
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x50
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x10
;PCODE: $00000005 VOL: 0
	.EQU __sm_standby=0x40
;PCODE: $00000006 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $00000007 VOL: 0
	#endif
;PCODE: $00000008 VOL: 0
;PCODE: $00000009 VOL: 0
;#include <stdint.h>
;
;#define _BV(bit)    (1 << (bit))
;//#define USI_TWI_BUFFER_SIZE 16
;enum{
;    USI_TWI_BUFFER_SIZE = 32
;};
;#ifndef NULL
;    #define NULL 0
;#endif
;
;# define DDR_USI	DDRB
;# define PORT_USI	PORTB
;# define PIN_USI	PINB
;# define PORT_USI_SDA	PINB5
;# define PORT_USI_SCL	PINB7
;# define PIN_USI_SDA	PINB5
;# define PIN_USI_SCL	PINB7
;
;
;enum{
;    of_state_check_address,
;    of_state_send_data,
;    of_state_request_ack,
;    of_state_check_ack,
;    of_state_receive_data,
;    of_state_store_data_and_send_ack
;} overflow_state_t;
;
;enum{
;    ss_state_before_start,
;    ss_state_after_start,
;    ss_state_address_selected,
;    ss_state_address_not_selected,
;    ss_state_data_processed
;} startstop_state_t;
;
;static void (*idle_callback)(void);
;static void	(*data_callback)(uint8_t input_buffer_length, const uint8_t *input_buffer, uint8_t *output_buffer_length, uint8_t *output_buffer);
;
;static uint8_t of_state;
;static uint8_t ss_state;
;static uint8_t	slave_address;
;static uint8_t	input_buffer[USI_TWI_BUFFER_SIZE];
;static uint8_t	input_buffer_length;
;static uint8_t	output_buffer[USI_TWI_BUFFER_SIZE];
;static uint8_t	output_buffer_length;
;static uint8_t	output_buffer_current;
;static uint8_t	stats_enabled;
;static uint16_t	start_conditions_count;
;static uint16_t	stop_conditions_count;
;static uint16_t	error_conditions_count;
;static uint16_t	overflow_conditions_count;
;static uint16_t	local_frames_count;
;static uint16_t	idle_call_count;
;
;
;static	uint8_t	*phy_send_buffer;
;static	uint8_t	*phy_send_buffer_length;
;enum{
;    phy_buffer_size = USI_TWI_BUFFER_SIZE
;};
;
;
;
;
;static void set_sda_to_input(void){
; 0000 005A static void set_sda_to_input(void){

	.CSEG
;PCODE: $0000000A VOL: 0
;PCODE: $0000000B VOL: 0
; 0000 005B     DDR_USI &= ~_BV(PORT_USI_SDA);
;PCODE: $0000000C VOL: 0
;PCODE: $0000000D VOL: 0
; 0000 005C }
;PCODE: $0000000E VOL: 0
;PCODE: $0000000F VOL: 0
;static void set_sda_to_output(void){
; 0000 005D static void set_sda_to_output(void){
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
; 0000 005E     DDR_USI |= _BV(PORT_USI_SDA);
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
; 0000 005F }
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
;static inline void set_scl_to_input(void){
; 0000 0060 static inline void set_scl_to_input(void){
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
; 0000 0061     DDR_USI &= ~_BV(PORT_USI_SCL);
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
; 0000 0062 }
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
;static inline void set_scl_to_output(void){
; 0000 0063 static inline void set_scl_to_output(void){
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
; 0000 0064     DDR_USI |= _BV(PORT_USI_SCL);
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
; 0000 0065 }
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
;static inline void set_sda_low(void){
; 0000 0066 static inline void set_sda_low(void){
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
; 0000 0067     PORT_USI &= ~_BV(PORT_USI_SDA);
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
; 0000 0068 }
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
;static inline void set_sda_high(void){
; 0000 0069 static inline void set_sda_high(void){
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
; 0000 006A     PORT_USI |= _BV(PORT_USI_SDA);
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
; 0000 006B }
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
;static inline void set_scl_low(void){
; 0000 006C static inline void set_scl_low(void){
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
; 0000 006D     PORT_USI &= ~_BV(PORT_USI_SCL);
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
; 0000 006E }
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
;static inline void set_scl_high(void){
; 0000 006F static inline void set_scl_high(void){
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
; 0000 0070     PORT_USI |= _BV(PORT_USI_SCL);
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
; 0000 0071 }
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
;
;
;static inline void twi_reset_state(void){
; 0000 0074 static inline void twi_reset_state(void){
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
; 0000 0075     USISR =
; 0000 0076             (1	<< USISIF) | // clear start condition flag
; 0000 0077             (1	<< USIOIF) | // clear overflow condition flag
; 0000 0078             (0	<< USIPF) | // !clear stop condition flag
; 0000 0079             (1	<< USIDC) | // clear arbitration error flag
; 0000 007A             (0x00 << USICNT0); // set counter to "8" bits
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
; 0000 007B     USICR =
; 0000 007C             (1 << USISIE) | // enable start condition interrupt
; 0000 007D             (0 << USIOIE) | // !enable overflow interrupt
; 0000 007E             (1 << USIWM1) | (0 << USIWM0) | // set usi in two-wire mode, disable bit counter overflow hold
; 0000 007F             (1 << USICS1) | (0 << USICS0) | (0 << USICLK) | // shift register clock source = external, positive edge, 4-bit counter source = external, both edges
; 0000 0080             (0 << USITC); // don't toggle clock-port pin
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
; 0000 0081 }
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
;
;static void twi_reset(void){
; 0000 0083 static void twi_reset(void){
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
; 0000 0084 // make sure no sda/scl remains pulled up or down
; 0000 0085     set_sda_to_input(); // deactivate internal pullup on sda/scl
;PCODE: $00000044 VOL: 0
; 0000 0086     set_sda_low();
;PCODE: $00000045 VOL: 0
; 0000 0087     set_scl_to_input();
;PCODE: $00000046 VOL: 0
; 0000 0088     set_scl_low();
;PCODE: $00000047 VOL: 0
; 0000 0089     set_sda_to_output(); // release (set high) on sda/scl
;PCODE: $00000048 VOL: 0
; 0000 008A     set_sda_high();
;PCODE: $00000049 VOL: 0
; 0000 008B     set_sda_to_input();
;PCODE: $0000004A VOL: 0
; 0000 008C     set_sda_high();
;PCODE: $0000004B VOL: 0
; 0000 008D     set_scl_to_output();
;PCODE: $0000004C VOL: 0
; 0000 008E     set_scl_high();
;PCODE: $0000004D VOL: 0
; 0000 008F     twi_reset_state();
;PCODE: $0000004E VOL: 0
; 0000 0090 }
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
;
;static inline void twi_init(void)
; 0000 0093 {
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
; 0000 0094     #if defined(USIPP)
; 0000 0095         #if defined(USI_ON_PORT_A)
; 0000 0096             USIPP |= _BV(USIPOS);
; 0000 0097         #else
; 0000 0098             USIPP &= ~_BV(USIPOS);
; 0000 0099         # endif
; 0000 009A     #endif
; 0000 009B     twi_reset();
;PCODE: $00000053 VOL: 0
; 0000 009C }
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
;
;
;// USI start condition interrupt service routine
;interrupt [USI_STRT] void usi_start_isr(void){
; 0000 00A0 interrupt [16] void usi_start_isr(void){
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
; 0000 00A1     set_sda_to_input();
;PCODE: $00000058 VOL: 0
; 0000 00A2     // wait for SCL to go low to ensure the start condition has completed (the
; 0000 00A3     // start detector will hold SCL low) - if a stop condition arises then leave
; 0000 00A4     // the interrupt to prevent waiting forever - don't use USISR to test for stop
; 0000 00A5     // condition as in Application Note AVR312 because the stop condition Flag is
; 0000 00A6     // going to be set from the last TWI sequence
; 0000 00A7     while(!(PIN_USI & _BV(PIN_USI_SDA)) && (PIN_USI & _BV(PIN_USI_SCL))){}
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
; 0000 00A8     // possible combinations
; 0000 00A9     // sda = low scl = low break start condition
; 0000 00AA     // sda = low scl = high loop
; 0000 00AB     // sda = high scl = low break stop condition
; 0000 00AC     // sda = high scl = high break stop condition
; 0000 00AD     if((PIN_USI & _BV(PIN_USI_SDA))){ // stop condition
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
; 0000 00AE         twi_reset();
;PCODE: $00000069 VOL: 0
; 0000 00AF         if(stats_enabled){
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
; 0000 00B0             error_conditions_count++;
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
; 0000 00B1         }
; 0000 00B2         return;
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
; 0000 00B3     }
; 0000 00B4 
; 0000 00B5     if(stats_enabled){
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
; 0000 00B6         start_conditions_count++;
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
; 0000 00B7     }
; 0000 00B8     of_state = of_state_check_address;
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
; 0000 00B9     ss_state = ss_state_after_start;
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
; 0000 00BA     USIDR = 0xff;
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
; 0000 00BB     USICR =
; 0000 00BC             (1 << USISIE) | // enable start condition interrupt
; 0000 00BD             (1 << USIOIE) | // enable overflow interrupt
; 0000 00BE             (1 << USIWM1) | (1 << USIWM0) | // set usi in two-wire mode, enable bit counter overflow hold
; 0000 00BF             (1 << USICS1) | (0 << USICS0) | (0 << USICLK) | // shift register clock source = external, positive edge, 4-bit counter source = external, both edges
; 0000 00C0             (0 << USITC); // don't toggle clock-port pin
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
; 0000 00C1     USISR =
; 0000 00C2             (1	<< USISIF) | // clear start condition flag
; 0000 00C3             (1	<< USIOIF) | // clear overflow condition flag
; 0000 00C4             (0	<< USIPF) | // !clear stop condition flag
; 0000 00C5             (1	<< USIDC) | // clear arbitration error flag
; 0000 00C6             (0x00 << USICNT0); // set counter to "8" bits
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
; 0000 00C7 }
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
;
;
;// USI counter overflow interrupt service routine
;interrupt [USI_OVERFLOW] void usi_ovf_isr(void){
; 0000 00CB interrupt [17] void usi_ovf_isr(void){
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
; 0000 00CC     // bit shift register overflow condition occured
; 0000 00CD     // scl forced low until overflow condition is cleared!
; 0000 00CE     uint8_t data = USIDR;
; 0000 00CF     uint8_t set_counter = 0x00; // send 8 bits (16 edges)
; 0000 00D0     if(stats_enabled){
;PCODE: $0000008C VOL: 0
;	data -> R17
;	set_counter -> R16
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
; 0000 00D1         overflow_conditions_count++;
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
; 0000 00D2     }
; 0000 00D3 again:
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
; 0000 00D4     switch(of_state){
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
; 0000 00D5     // start condition occured and succeed
; 0000 00D6     // check address, if not OK, reset usi
; 0000 00D7     // note: not using general call address
; 0000 00D8         case(of_state_check_address):{
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
; 0000 00D9             uint8_t address;
; 0000 00DA             uint8_t direction;
; 0000 00DB             direction = data & 0x01;
;PCODE: $0000009E VOL: 0
;	address -> Y+1
;	direction -> Y+0
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
; 0000 00DC             address = (data & 0xfe) >> 1;
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
; 0000 00DD             if(address == slave_address){
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
; 0000 00DE                 ss_state = ss_state_address_selected;
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
; 0000 00DF                 if(direction){ // read request from master
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 0
; 0000 00E0                     of_state = of_state_send_data;
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
; 0000 00E1                 }else{	// write request from master
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
; 0000 00E2                     of_state = of_state_receive_data;
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
; 0000 00E3                 }
;PCODE: $000000B6 VOL: 0
; 0000 00E4                 USIDR = 0x00;
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
; 0000 00E5                 set_counter = 0x0e; // send 1 bit (2 edges)
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
; 0000 00E6                 set_sda_to_output(); // initiate send ack
;PCODE: $000000BB VOL: 0
; 0000 00E7             }else{
;PCODE: $000000BC VOL: 0
;PCODE: $000000BD VOL: 0
; 0000 00E8                 USIDR = 0x00;
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
; 0000 00E9                 set_counter = 0x00;
;PCODE: $000000C0 VOL: 0
;PCODE: $000000C1 VOL: 0
; 0000 00EA                 twi_reset_state();
;PCODE: $000000C2 VOL: 0
; 0000 00EB                 ss_state = ss_state_address_not_selected;
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 0
; 0000 00EC             }
;PCODE: $000000C5 VOL: 0
; 0000 00ED             break;
;PCODE: $000000C6 VOL: 0
;PCODE: $000000C7 VOL: 0
; 0000 00EE         }
; 0000 00EF         // process read request from master
; 0000 00F0         case(of_state_send_data):{
;PCODE: $000000C8 VOL: 0
;PCODE: $000000C9 VOL: 0
;PCODE: $000000CA VOL: 0
; 0000 00F1             ss_state = ss_state_data_processed;
;PCODE: $000000CB VOL: 0
;PCODE: $000000CC VOL: 0
; 0000 00F2             of_state = of_state_request_ack;
;PCODE: $000000CD VOL: 0
;PCODE: $000000CE VOL: 0
; 0000 00F3             if(output_buffer_current < output_buffer_length){
;PCODE: $000000CF VOL: 0
;PCODE: $000000D0 VOL: 0
;PCODE: $000000D1 VOL: 0
;PCODE: $000000D2 VOL: 0
; 0000 00F4                 USIDR = output_buffer[output_buffer_current++];
;PCODE: $000000D3 VOL: 0
;PCODE: $000000D4 VOL: 0
;PCODE: $000000D5 VOL: 0
;PCODE: $000000D6 VOL: 0
;PCODE: $000000D7 VOL: 0
;PCODE: $000000D8 VOL: 0
;PCODE: $000000D9 VOL: 0
; 0000 00F5             }else{
;PCODE: $000000DA VOL: 0
;PCODE: $000000DB VOL: 0
; 0000 00F6                 USIDR = 0x00; // no more data, but cannot send "nothing" or "nak"
;PCODE: $000000DC VOL: 0
;PCODE: $000000DD VOL: 0
; 0000 00F7             }
;PCODE: $000000DE VOL: 0
; 0000 00F8             set_counter = 0x00;
;PCODE: $000000DF VOL: 0
;PCODE: $000000E0 VOL: 0
; 0000 00F9             set_sda_to_output(); // initiate send data
;PCODE: $000000E1 VOL: 0
; 0000 00FA             break;
;PCODE: $000000E2 VOL: 0
; 0000 00FB         }
; 0000 00FC         // data sent to master, request ack (or nack) from master
; 0000 00FD         case(of_state_request_ack):{
;PCODE: $000000E3 VOL: 0
;PCODE: $000000E4 VOL: 0
;PCODE: $000000E5 VOL: 0
; 0000 00FE             of_state = of_state_check_ack;
;PCODE: $000000E6 VOL: 0
;PCODE: $000000E7 VOL: 0
; 0000 00FF             USIDR = 0x00;
;PCODE: $000000E8 VOL: 0
;PCODE: $000000E9 VOL: 0
; 0000 0100             set_counter = 0x0e; // receive 1 bit (2 edges)
;PCODE: $000000EA VOL: 0
;PCODE: $000000EB VOL: 0
; 0000 0101             set_sda_to_input(); // initiate receive ack
;PCODE: $000000EC VOL: 0
; 0000 0102             break;
;PCODE: $000000ED VOL: 0
; 0000 0103         }
; 0000 0104         // ack/nack from master received
; 0000 0105         case(of_state_check_ack):{
;PCODE: $000000EE VOL: 0
;PCODE: $000000EF VOL: 0
;PCODE: $000000F0 VOL: 0
; 0000 0106             if(data){ // if NACK, the master does not want more data
;PCODE: $000000F1 VOL: 0
;PCODE: $000000F2 VOL: 0
; 0000 0107                 of_state = of_state_check_address;
;PCODE: $000000F3 VOL: 0
;PCODE: $000000F4 VOL: 0
; 0000 0108                 set_counter = 0x00;
;PCODE: $000000F5 VOL: 0
;PCODE: $000000F6 VOL: 0
; 0000 0109                 twi_reset();
;PCODE: $000000F7 VOL: 0
; 0000 010A             }else{
;PCODE: $000000F8 VOL: 0
;PCODE: $000000F9 VOL: 0
; 0000 010B                 of_state = of_state_send_data;
;PCODE: $000000FA VOL: 0
;PCODE: $000000FB VOL: 0
; 0000 010C                 goto again; // from here we just drop straight into state_send_data
;PCODE: $000000FC VOL: 0
; 0000 010D             } // don't wait for another overflow interrupt
;PCODE: $000000FD VOL: 0
; 0000 010E             break;
;PCODE: $000000FE VOL: 0
; 0000 010F         }
; 0000 0110         // process write request from master
; 0000 0111         case(of_state_receive_data):{
;PCODE: $000000FF VOL: 0
;PCODE: $00000100 VOL: 0
;PCODE: $00000101 VOL: 0
; 0000 0112             ss_state = ss_state_data_processed;
;PCODE: $00000102 VOL: 0
;PCODE: $00000103 VOL: 0
; 0000 0113             of_state = of_state_store_data_and_send_ack;
;PCODE: $00000104 VOL: 0
;PCODE: $00000105 VOL: 0
; 0000 0114             set_counter = 0x00; // receive 1 bit (2 edges)
;PCODE: $00000106 VOL: 0
;PCODE: $00000107 VOL: 0
; 0000 0115             set_sda_to_input(); // initiate receive data
;PCODE: $00000108 VOL: 0
; 0000 0116             break;
;PCODE: $00000109 VOL: 0
; 0000 0117         }
; 0000 0118         // data received from master, store it and wait for more data
; 0000 0119         case(of_state_store_data_and_send_ack):{
;PCODE: $0000010A VOL: 0
;PCODE: $0000010B VOL: 0
;PCODE: $0000010C VOL: 0
; 0000 011A             of_state = of_state_receive_data;
;PCODE: $0000010D VOL: 0
;PCODE: $0000010E VOL: 0
; 0000 011B             if(input_buffer_length < (USI_TWI_BUFFER_SIZE - 1)){
;PCODE: $0000010F VOL: 0
;PCODE: $00000110 VOL: 0
;PCODE: $00000111 VOL: 0
; 0000 011C                 input_buffer[input_buffer_length++] = data;
;PCODE: $00000112 VOL: 0
;PCODE: $00000113 VOL: 0
;PCODE: $00000114 VOL: 0
;PCODE: $00000115 VOL: 0
;PCODE: $00000116 VOL: 0
;PCODE: $00000117 VOL: 0
; 0000 011D             }
; 0000 011E             USIDR = 0x00;
;PCODE: $00000118 VOL: 0
;PCODE: $00000119 VOL: 0
;PCODE: $0000011A VOL: 0
; 0000 011F             set_counter = 0x0e; // send 1 bit (2 edges)
;PCODE: $0000011B VOL: 0
;PCODE: $0000011C VOL: 0
; 0000 0120             set_sda_to_output(); // initiate send ack
;PCODE: $0000011D VOL: 0
; 0000 0121             break;
;PCODE: $0000011E VOL: 0
; 0000 0122         }
; 0000 0123     }
;PCODE: $0000011F VOL: 0
; 0000 0124     USISR =
; 0000 0125             (0	<< USISIF) | // don't clear start condition flag
; 0000 0126             (1	<< USIOIF) | // clear overflow condition flag
; 0000 0127             (0	<< USIPF) | // don't clear stop condition flag
; 0000 0128             (1	<< USIDC) | // clear arbitration error flag
; 0000 0129             (set_counter << USICNT0); // set counter to 8 or 1 bits
;PCODE: $00000120 VOL: 0
;PCODE: $00000121 VOL: 0
;PCODE: $00000122 VOL: 0
; 0000 012A }
;PCODE: $00000123 VOL: 0
;PCODE: $00000124 VOL: 0
;PCODE: $00000125 VOL: 0
;PCODE: $00000126 VOL: 0
;
;void usi_twi_slave(uint8_t slave_address_in, uint8_t use_sleep, void (*data_callback_in)(uint8_t input_buffer_length,
; 0000 012D                     const uint8_t *input_buffer, uint8_t *output_buffer_length, uint8_t *output_buffer),void (*idle_callback_in)(void)){
;PCODE: $00000127 VOL: 0
;PCODE: $00000128 VOL: 0
; 0000 012E     uint8_t	call_datacallback = 0;
; 0000 012F     slave_address = slave_address_in;
;PCODE: $00000129 VOL: 0
;	slave_address_in -> Y+6
;	use_sleep -> Y+5
;	*data_callback_in -> Y+3
;	*idle_callback_in -> Y+1
;	call_datacallback -> R17
;PCODE: $0000012A VOL: 0
;PCODE: $0000012B VOL: 0
;PCODE: $0000012C VOL: 0
;PCODE: $0000012D VOL: 0
; 0000 0130     data_callback = data_callback_in;
;PCODE: $0000012E VOL: 0
;PCODE: $0000012F VOL: 0
; 0000 0131     idle_callback = idle_callback_in;
;PCODE: $00000130 VOL: 0
;PCODE: $00000131 VOL: 0
; 0000 0132     input_buffer_length = 0;
;PCODE: $00000132 VOL: 0
;PCODE: $00000133 VOL: 0
; 0000 0133     output_buffer_length = 0;
;PCODE: $00000134 VOL: 0
;PCODE: $00000135 VOL: 0
; 0000 0134     output_buffer_current = 0;
;PCODE: $00000136 VOL: 0
;PCODE: $00000137 VOL: 0
; 0000 0135     ss_state = ss_state_before_start;
;PCODE: $00000138 VOL: 0
;PCODE: $00000139 VOL: 0
; 0000 0136 //    if(use_sleep){
; 0000 0137 //        set_sleep_mode(SLEEP_MODE_IDLE);
; 0000 0138 //    }
; 0000 0139     twi_init();
;PCODE: $0000013A VOL: 0
; 0000 013A     #asm("sei")
;PCODE: $0000013B VOL: 0
	sei
;PCODE: $0000013C VOL: 0
; 0000 013B     for(;;){
;PCODE: $0000013D VOL: 0
;PCODE: $0000013E VOL: 0
; 0000 013C         if(idle_callback){
;PCODE: $0000013F VOL: 0
;PCODE: $00000140 VOL: 0
;PCODE: $00000141 VOL: 0
;PCODE: $00000142 VOL: 0
;PCODE: $00000143 VOL: 0
; 0000 013D             idle_callback();
;PCODE: $00000144 VOL: 0
;PCODE: $00000145 VOL: 0
;PCODE: $00000146 VOL: 0
;PCODE: $00000147 VOL: 0
; 0000 013E             if(stats_enabled){
;PCODE: $00000148 VOL: 0
;PCODE: $00000149 VOL: 0
;PCODE: $0000014A VOL: 0
; 0000 013F                 idle_call_count++;
;PCODE: $0000014B VOL: 0
;PCODE: $0000014C VOL: 0
;PCODE: $0000014D VOL: 0
;PCODE: $0000014E VOL: 0
; 0000 0140             }
; 0000 0141         }
;PCODE: $0000014F VOL: 0
; 0000 0142 
; 0000 0143         if(use_sleep && (ss_state == ss_state_before_start)){
;PCODE: $00000150 VOL: 0
;PCODE: $00000151 VOL: 0
;PCODE: $00000152 VOL: 0
;PCODE: $00000153 VOL: 0
;PCODE: $00000154 VOL: 0
;PCODE: $00000155 VOL: 0
;PCODE: $00000156 VOL: 0
;PCODE: $00000157 VOL: 0
;PCODE: $00000158 VOL: 0
;PCODE: $00000159 VOL: 0
;PCODE: $0000015A VOL: 0
; 0000 0144             //sleep_mode();
; 0000 0145         }
; 0000 0146 
; 0000 0147         if(USISR & _BV(USIPF)){
;PCODE: $0000015B VOL: 0
;PCODE: $0000015C VOL: 0
;PCODE: $0000015D VOL: 0
;PCODE: $0000015E VOL: 0
; 0000 0148             #asm("cli")
;PCODE: $0000015F VOL: 0
	cli
;PCODE: $00000160 VOL: 0
; 0000 0149             if(stats_enabled){
;PCODE: $00000161 VOL: 0
;PCODE: $00000162 VOL: 0
;PCODE: $00000163 VOL: 0
; 0000 014A                 stop_conditions_count++;
;PCODE: $00000164 VOL: 0
;PCODE: $00000165 VOL: 0
;PCODE: $00000166 VOL: 0
;PCODE: $00000167 VOL: 0
; 0000 014B             }
; 0000 014C             USISR |= _BV(USIPF); // clear stop condition flag
;PCODE: $00000168 VOL: 0
;PCODE: $00000169 VOL: 0
;PCODE: $0000016A VOL: 0
; 0000 014D             switch(ss_state){
;PCODE: $0000016B VOL: 0
;PCODE: $0000016C VOL: 0
; 0000 014E                 case(ss_state_after_start):{
;PCODE: $0000016D VOL: 0
;PCODE: $0000016E VOL: 0
; 0000 014F                     twi_reset();
;PCODE: $0000016F VOL: 0
; 0000 0150                     break;
;PCODE: $00000170 VOL: 0
; 0000 0151                 }
; 0000 0152 
; 0000 0153                 case(ss_state_data_processed):{
;PCODE: $00000171 VOL: 0
;PCODE: $00000172 VOL: 0
;PCODE: $00000173 VOL: 0
; 0000 0154                     if(stats_enabled){
;PCODE: $00000174 VOL: 0
;PCODE: $00000175 VOL: 0
;PCODE: $00000176 VOL: 0
; 0000 0155                         local_frames_count++;
;PCODE: $00000177 VOL: 0
;PCODE: $00000178 VOL: 0
;PCODE: $00000179 VOL: 0
;PCODE: $0000017A VOL: 0
; 0000 0156                     }
; 0000 0157                     call_datacallback = 1;
;PCODE: $0000017B VOL: 0
;PCODE: $0000017C VOL: 0
;PCODE: $0000017D VOL: 0
; 0000 0158                     break;
;PCODE: $0000017E VOL: 0
; 0000 0159                 }
; 0000 015A             }
;PCODE: $0000017F VOL: 0
; 0000 015B             ss_state = ss_state_before_start;
;PCODE: $00000180 VOL: 0
;PCODE: $00000181 VOL: 0
; 0000 015C             #asm("sei")
;PCODE: $00000182 VOL: 0
	sei
;PCODE: $00000183 VOL: 0
; 0000 015D         }
; 0000 015E         if(call_datacallback){
;PCODE: $00000184 VOL: 0
;PCODE: $00000185 VOL: 0
;PCODE: $00000186 VOL: 0
; 0000 015F             output_buffer_length = 0;
;PCODE: $00000187 VOL: 0
;PCODE: $00000188 VOL: 0
; 0000 0160             output_buffer_current = 0;
;PCODE: $00000189 VOL: 0
;PCODE: $0000018A VOL: 0
; 0000 0161             data_callback(input_buffer_length, input_buffer, &output_buffer_length, output_buffer);
;PCODE: $0000018B VOL: 0
;PCODE: $0000018C VOL: 0
;PCODE: $0000018D VOL: 0
;PCODE: $0000018E VOL: 0
;PCODE: $0000018F VOL: 0
;PCODE: $00000190 VOL: 0
;PCODE: $00000191 VOL: 0
;PCODE: $00000192 VOL: 0
;PCODE: $00000193 VOL: 0
;PCODE: $00000194 VOL: 0
;PCODE: $00000195 VOL: 0
;PCODE: $00000196 VOL: 0
;PCODE: $00000197 VOL: 0
;PCODE: $00000198 VOL: 0
; 0000 0162             input_buffer_length = 0;
;PCODE: $00000199 VOL: 0
;PCODE: $0000019A VOL: 0
; 0000 0163             call_datacallback = 0;
;PCODE: $0000019B VOL: 0
;PCODE: $0000019C VOL: 0
; 0000 0164         }
; 0000 0165     }
;PCODE: $0000019D VOL: 0
;PCODE: $0000019E VOL: 0
;PCODE: $0000019F VOL: 0
;PCODE: $000001A0 VOL: 0
; 0000 0166 }
;PCODE: $000001A1 VOL: 0
;PCODE: $000001A2 VOL: 0
;PCODE: $000001A3 VOL: 0
;PCODE: $000001A4 VOL: 0
;PCODE: $000001A5 VOL: 0
;
;void usi_twi_enable_stats(uint8_t onoff){
; 0000 0168 void usi_twi_enable_stats(uint8_t onoff){
;PCODE: $000001A6 VOL: 0
;PCODE: $000001A7 VOL: 0
; 0000 0169     stats_enabled = onoff;
;	onoff -> Y+0
;PCODE: $000001A8 VOL: 0
;PCODE: $000001A9 VOL: 0
; 0000 016A     start_conditions_count = 0;
;PCODE: $000001AA VOL: 0
;PCODE: $000001AB VOL: 0
; 0000 016B     stop_conditions_count = 0;
;PCODE: $000001AC VOL: 0
;PCODE: $000001AD VOL: 0
; 0000 016C     error_conditions_count = 0;
;PCODE: $000001AE VOL: 0
;PCODE: $000001AF VOL: 0
; 0000 016D     overflow_conditions_count = 0;
;PCODE: $000001B0 VOL: 0
;PCODE: $000001B1 VOL: 0
; 0000 016E     local_frames_count = 0;
;PCODE: $000001B2 VOL: 0
;PCODE: $000001B3 VOL: 0
; 0000 016F     idle_call_count = 0;
;PCODE: $000001B4 VOL: 0
;PCODE: $000001B5 VOL: 0
; 0000 0170 }
;PCODE: $000001B6 VOL: 0
;PCODE: $000001B7 VOL: 0
;PCODE: $000001B8 VOL: 0
;
;uint16_t usi_twi_stats_start_conditions(void){
; 0000 0172 uint16_t usi_twi_stats_start_conditions(void){
;PCODE: $000001B9 VOL: 0
;PCODE: $000001BA VOL: 0
; 0000 0173     return(start_conditions_count);
;PCODE: $000001BB VOL: 0
;PCODE: $000001BC VOL: 0
; 0000 0174 }
;PCODE: $000001BD VOL: 0
;uint16_t usi_twi_stats_stop_conditions(void){
; 0000 0175 uint16_t usi_twi_stats_stop_conditions(void){
;PCODE: $000001BE VOL: 0
;PCODE: $000001BF VOL: 0
; 0000 0176     return(stop_conditions_count);
;PCODE: $000001C0 VOL: 0
;PCODE: $000001C1 VOL: 0
; 0000 0177 }
;PCODE: $000001C2 VOL: 0
;uint16_t usi_twi_stats_error_conditions(void){
; 0000 0178 uint16_t usi_twi_stats_error_conditions(void){
;PCODE: $000001C3 VOL: 0
;PCODE: $000001C4 VOL: 0
; 0000 0179     return(error_conditions_count);
;PCODE: $000001C5 VOL: 0
;PCODE: $000001C6 VOL: 0
; 0000 017A }
;PCODE: $000001C7 VOL: 0
;uint16_t usi_twi_stats_overflow_conditions(void){
; 0000 017B uint16_t usi_twi_stats_overflow_conditions(void){
;PCODE: $000001C8 VOL: 0
;PCODE: $000001C9 VOL: 0
; 0000 017C     return(overflow_conditions_count);
;PCODE: $000001CA VOL: 0
;PCODE: $000001CB VOL: 0
; 0000 017D }
;PCODE: $000001CC VOL: 0
;uint16_t usi_twi_stats_local_frames(void){
; 0000 017E uint16_t usi_twi_stats_local_frames(void){
;PCODE: $000001CD VOL: 0
;PCODE: $000001CE VOL: 0
; 0000 017F     return(local_frames_count);
;PCODE: $000001CF VOL: 0
;PCODE: $000001D0 VOL: 0
; 0000 0180 }
;PCODE: $000001D1 VOL: 0
;uint16_t usi_twi_stats_idle_calls(void){
; 0000 0181 uint16_t usi_twi_stats_idle_calls(void){
;PCODE: $000001D2 VOL: 0
;PCODE: $000001D3 VOL: 0
; 0000 0182     return(idle_call_count);
;PCODE: $000001D4 VOL: 0
;PCODE: $000001D5 VOL: 0
; 0000 0183 }
;PCODE: $000001D6 VOL: 0
;
;void transmit(char data){
; 0000 0185 void transmit(char data){
;PCODE: $000001D7 VOL: 0
;PCODE: $000001D8 VOL: 0
; 0000 0186     while(!(UCSRA & (1 << UDRE))){}
;	data -> Y+0
;PCODE: $000001D9 VOL: 0
;PCODE: $000001DA VOL: 0
;PCODE: $000001DB VOL: 0
;PCODE: $000001DC VOL: 0
;PCODE: $000001DD VOL: 0
;PCODE: $000001DE VOL: 0
; 0000 0187     UDR=data;
;PCODE: $000001DF VOL: 0
;PCODE: $000001E0 VOL: 0
; 0000 0188 }
;PCODE: $000001E1 VOL: 0
;PCODE: $000001E2 VOL: 0
;PCODE: $000001E3 VOL: 0
;void transmitInt(int data){
; 0000 0189 void transmitInt(int data){
;PCODE: $000001E4 VOL: 0
;PCODE: $000001E5 VOL: 0
; 0000 018A     int number = 0;
; 0000 018B     char str = '';
; 0000 018C     if(data < 10){
;PCODE: $000001E6 VOL: 0
;	data -> Y+4
;	number -> R16,R17
;	str -> R19
;PCODE: $000001E7 VOL: 0
;PCODE: $000001E8 VOL: 0
;PCODE: $000001E9 VOL: 0
;PCODE: $000001EA VOL: 0
;PCODE: $000001EB VOL: 0
;PCODE: $000001EC VOL: 0
;PCODE: $000001ED VOL: 0
; 0000 018D         str = data + '0';
;PCODE: $000001EE VOL: 0
;PCODE: $000001EF VOL: 0
;PCODE: $000001F0 VOL: 0
; 0000 018E         transmit(str);
;PCODE: $000001F1 VOL: 0
;PCODE: $000001F2 VOL: 0
; 0000 018F     }else if(data < 100){
;PCODE: $000001F3 VOL: 0
;PCODE: $000001F4 VOL: 0
;PCODE: $000001F5 VOL: 0
;PCODE: $000001F6 VOL: 0
;PCODE: $000001F7 VOL: 0
; 0000 0190         number = data / 10;
;PCODE: $000001F8 VOL: 0
;PCODE: $000001F9 VOL: 0
;PCODE: $000001FA VOL: 0
;PCODE: $000001FB VOL: 0
; 0000 0191         transmit(number + '0');
;PCODE: $000001FC VOL: 0
;PCODE: $000001FD VOL: 0
;PCODE: $000001FE VOL: 0
;PCODE: $000001FF VOL: 0
; 0000 0192         number = data - (number*10);
;PCODE: $00000200 VOL: 0
;PCODE: $00000201 VOL: 0
;PCODE: $00000202 VOL: 0
;PCODE: $00000203 VOL: 0
;PCODE: $00000204 VOL: 0
;PCODE: $00000205 VOL: 0
; 0000 0193         transmit(number + '0');
;PCODE: $00000206 VOL: 0
;PCODE: $00000207 VOL: 0
;PCODE: $00000208 VOL: 0
;PCODE: $00000209 VOL: 0
; 0000 0194     }else if(data < 1000){
;PCODE: $0000020A VOL: 0
;PCODE: $0000020B VOL: 0
;PCODE: $0000020C VOL: 0
;PCODE: $0000020D VOL: 0
;PCODE: $0000020E VOL: 0
; 0000 0195         number = data / 100;
;PCODE: $0000020F VOL: 0
;PCODE: $00000210 VOL: 0
;PCODE: $00000211 VOL: 0
;PCODE: $00000212 VOL: 0
; 0000 0196         transmit(number + '0');
;PCODE: $00000213 VOL: 0
;PCODE: $00000214 VOL: 0
;PCODE: $00000215 VOL: 0
;PCODE: $00000216 VOL: 0
; 0000 0197         data = data - (number * 100);
;PCODE: $00000217 VOL: 0
;PCODE: $00000218 VOL: 0
;PCODE: $00000219 VOL: 0
;PCODE: $0000021A VOL: 0
;PCODE: $0000021B VOL: 0
;PCODE: $0000021C VOL: 0
; 0000 0198         number = data / 10;
;PCODE: $0000021D VOL: 0
;PCODE: $0000021E VOL: 0
;PCODE: $0000021F VOL: 0
;PCODE: $00000220 VOL: 0
; 0000 0199         transmit(number + '0');
;PCODE: $00000221 VOL: 0
;PCODE: $00000222 VOL: 0
;PCODE: $00000223 VOL: 0
;PCODE: $00000224 VOL: 0
; 0000 019A         number = data - (number*10);
;PCODE: $00000225 VOL: 0
;PCODE: $00000226 VOL: 0
;PCODE: $00000227 VOL: 0
;PCODE: $00000228 VOL: 0
;PCODE: $00000229 VOL: 0
;PCODE: $0000022A VOL: 0
; 0000 019B         transmit(number + '0');
;PCODE: $0000022B VOL: 0
;PCODE: $0000022C VOL: 0
;PCODE: $0000022D VOL: 0
;PCODE: $0000022E VOL: 0
; 0000 019C     }
; 0000 019D }
;PCODE: $0000022F VOL: 0
;PCODE: $00000230 VOL: 0
;PCODE: $00000231 VOL: 0
;PCODE: $00000232 VOL: 0
;PCODE: $00000233 VOL: 0
;PCODE: $00000234 VOL: 0
;PCODE: $00000235 VOL: 0
;
;static void reply(uint8_t error_code, uint8_t reply_length, const uint8_t *reply_string){
; 0000 019F static void reply(uint8_t error_code, uint8_t reply_length, const uint8_t *reply_string){
;PCODE: $00000236 VOL: 0
;PCODE: $00000237 VOL: 0
; 0000 01A0     uint8_t checksum;
; 0000 01A1     uint8_t ix;
; 0000 01A2     if((reply_length + 4) > phy_buffer_size){
;PCODE: $00000238 VOL: 0
;	error_code -> Y+4
;	reply_length -> Y+3
;	*reply_string -> Y+2
;	checksum -> R17
;	ix -> R16
;PCODE: $00000239 VOL: 0
;PCODE: $0000023A VOL: 0
;PCODE: $0000023B VOL: 0
;PCODE: $0000023C VOL: 0
;PCODE: $0000023D VOL: 0
; 0000 01A3         return;
;PCODE: $0000023E VOL: 0
;PCODE: $0000023F VOL: 0
;PCODE: $00000240 VOL: 0
; 0000 01A4     }
; 0000 01A5     phy_send_buffer[0] = 3 + reply_length;
;PCODE: $00000241 VOL: 0
;PCODE: $00000242 VOL: 0
;PCODE: $00000243 VOL: 0
;PCODE: $00000244 VOL: 0
;PCODE: $00000245 VOL: 0
; 0000 01A6     phy_send_buffer[1] = error_code;
;PCODE: $00000246 VOL: 0
;PCODE: $00000247 VOL: 0
;PCODE: $00000248 VOL: 0
; 0000 01A7    // phy_send_buffer[2] = input_byte;
; 0000 01A8     for(ix = 0; ix < reply_length; ix++){
;PCODE: $00000249 VOL: 0
;PCODE: $0000024A VOL: 0
;PCODE: $0000024B VOL: 0
;PCODE: $0000024C VOL: 0
;PCODE: $0000024D VOL: 0
;PCODE: $0000024E VOL: 0
;PCODE: $0000024F VOL: 0
;PCODE: $00000250 VOL: 0
;PCODE: $00000251 VOL: 0
; 0000 01A9         phy_send_buffer[3 + ix] = reply_string[ix];
;PCODE: $00000252 VOL: 0
;PCODE: $00000253 VOL: 0
;PCODE: $00000254 VOL: 0
;PCODE: $00000255 VOL: 0
;PCODE: $00000256 VOL: 0
;PCODE: $00000257 VOL: 0
;PCODE: $00000258 VOL: 0
;PCODE: $00000259 VOL: 0
;PCODE: $0000025A VOL: 0
;PCODE: $0000025B VOL: 0
;PCODE: $0000025C VOL: 0
; 0000 01AA     }
;PCODE: $0000025D VOL: 0
;PCODE: $0000025E VOL: 0
;PCODE: $0000025F VOL: 0
;PCODE: $00000260 VOL: 0
;PCODE: $00000261 VOL: 0
; 0000 01AB     for(ix = 1, checksum = 0; ix < (3 + reply_length); ix++){
;PCODE: $00000262 VOL: 0
;PCODE: $00000263 VOL: 0
;PCODE: $00000264 VOL: 0
;PCODE: $00000265 VOL: 0
;PCODE: $00000266 VOL: 0
;PCODE: $00000267 VOL: 0
;PCODE: $00000268 VOL: 0
;PCODE: $00000269 VOL: 0
;PCODE: $0000026A VOL: 0
;PCODE: $0000026B VOL: 0
;PCODE: $0000026C VOL: 0
;PCODE: $0000026D VOL: 0
;PCODE: $0000026E VOL: 0
;PCODE: $0000026F VOL: 0
;PCODE: $00000270 VOL: 0
; 0000 01AC         checksum += phy_send_buffer[ix];
;PCODE: $00000271 VOL: 0
;PCODE: $00000272 VOL: 0
;PCODE: $00000273 VOL: 0
;PCODE: $00000274 VOL: 0
;PCODE: $00000275 VOL: 0
;PCODE: $00000276 VOL: 0
; 0000 01AD     }
;PCODE: $00000277 VOL: 0
;PCODE: $00000278 VOL: 0
;PCODE: $00000279 VOL: 0
;PCODE: $0000027A VOL: 0
;PCODE: $0000027B VOL: 0
; 0000 01AE     phy_send_buffer[3 + reply_length] = checksum;
;PCODE: $0000027C VOL: 0
;PCODE: $0000027D VOL: 0
;PCODE: $0000027E VOL: 0
;PCODE: $0000027F VOL: 0
;PCODE: $00000280 VOL: 0
; 0000 01AF     *phy_send_buffer_length = 3 + reply_length + 1;
;PCODE: $00000281 VOL: 0
;PCODE: $00000282 VOL: 0
;PCODE: $00000283 VOL: 0
;PCODE: $00000284 VOL: 0
; 0000 01B0 }
;PCODE: $00000285 VOL: 0
;PCODE: $00000286 VOL: 0
;PCODE: $00000287 VOL: 0
;PCODE: $00000288 VOL: 0
;
;static void reply_char(uint8_t value){
; 0000 01B2 static void reply_char(uint8_t value){
;PCODE: $00000289 VOL: 0
;PCODE: $0000028A VOL: 0
; 0000 01B3     reply(0, sizeof(value), &value);
;	value -> Y+0
;PCODE: $0000028B VOL: 0
;PCODE: $0000028C VOL: 0
;PCODE: $0000028D VOL: 0
;PCODE: $0000028E VOL: 0
;PCODE: $0000028F VOL: 0
;PCODE: $00000290 VOL: 0
;PCODE: $00000291 VOL: 0
; 0000 01B4     //reply(0, 0, 0));
; 0000 01B5 }
;PCODE: $00000292 VOL: 0
;PCODE: $00000293 VOL: 0
;PCODE: $00000294 VOL: 0
;
;static void my_twi_callback(uint8_t input_buffer_length, const uint8_t *input_buffer, uint8_t *output_buffer_length, uint8_t *output_buffer){
; 0000 01B7 static void my_twi_callback(uint8_t input_buffer_length, const uint8_t *input_buffer, uint8_t *output_buffer_length, uint8_t *output_buffer){
;PCODE: $00000295 VOL: 0
;PCODE: $00000296 VOL: 0
; 0000 01B8                         uint8_t l = 1;
; 0000 01B9                         uint8_t b = 5;
; 0000 01BA 
; 0000 01BB                         PORTD.5 = !PORTD.5;
;PCODE: $00000297 VOL: 0
;	input_buffer_length -> Y+5
;	*input_buffer -> Y+4
;	*output_buffer_length -> Y+3
;	*output_buffer -> Y+2
;	l -> R17
;	b -> R16
;PCODE: $00000298 VOL: 0
;PCODE: $00000299 VOL: 0
;PCODE: $0000029A VOL: 0
;PCODE: $0000029B VOL: 0
;PCODE: $0000029C VOL: 0
;PCODE: $0000029D VOL: 0
;PCODE: $0000029E VOL: 0
;PCODE: $0000029F VOL: 0
;PCODE: $000002A0 VOL: 0
;PCODE: $000002A1 VOL: 0
;PCODE: $000002A2 VOL: 0
;PCODE: $000002A3 VOL: 0
;PCODE: $000002A4 VOL: 0
;PCODE: $000002A5 VOL: 0
; 0000 01BC                         transmit(input_buffer_length);
;PCODE: $000002A6 VOL: 0
;PCODE: $000002A7 VOL: 0
;PCODE: $000002A8 VOL: 0
; 0000 01BD                         transmit(input_buffer[0]);
;PCODE: $000002A9 VOL: 0
;PCODE: $000002AA VOL: 0
;PCODE: $000002AB VOL: 0
;PCODE: $000002AC VOL: 0
; 0000 01BE                         transmit(input_buffer[1]);
;PCODE: $000002AD VOL: 0
;PCODE: $000002AE VOL: 0
;PCODE: $000002AF VOL: 0
;PCODE: $000002B0 VOL: 0
; 0000 01BF                         //transmit(0);
; 0000 01C0                         //transmit(0);
; 0000 01C1                         //transmit(0);
; 0000 01C2                         //transmit(0);
; 0000 01C3                         //transmit(0);
; 0000 01C4                         //transmit(0);
; 0000 01C5                         //transmit(0);
; 0000 01C6                         //transmit(0);
; 0000 01C7                         //transmit(0);
; 0000 01C8                         //transmit(0);
; 0000 01C9                         //transmit(0);
; 0000 01CA                         //transmit(0);
; 0000 01CB                         //transmit(0);
; 0000 01CC 
; 0000 01CD 
; 0000 01CE                         //output_buffer_length = &l;
; 0000 01CF                         //output_buffer = &b;
; 0000 01D0                         reply_char(8);
;PCODE: $000002B1 VOL: 0
;PCODE: $000002B2 VOL: 0
;PCODE: $000002B3 VOL: 0
; 0000 01D1                         return;
;PCODE: $000002B4 VOL: 0
;PCODE: $000002B5 VOL: 0
;PCODE: $000002B6 VOL: 0
; 0000 01D2                         //return(reply(0,0,0));
; 0000 01D3 }
;PCODE: $000002B7 VOL: 0
;
;
;// Declare your global variables here
;
;void main(void)
; 0000 01D9 {
;PCODE: $000002B8 VOL: 0
; 0000 01DA // Declare your local variables here
; 0000 01DB 
; 0000 01DC // Crystal Oscillator division factor: 1
; 0000 01DD #pragma optsize-
; 0000 01DE CLKPR=0x80;
;PCODE: $000002B9 VOL: 0
;PCODE: $000002BA VOL: 0
; 0000 01DF CLKPR=0x00;
;PCODE: $000002BB VOL: 0
;PCODE: $000002BC VOL: 0
; 0000 01E0 #ifdef _OPTIMIZE_SIZE_
; 0000 01E1 #pragma optsize+
; 0000 01E2 #endif
; 0000 01E3 
; 0000 01E4 // Input/Output Ports initialization
; 0000 01E5 // Port A initialization
; 0000 01E6 // Func2=In Func1=In Func0=In
; 0000 01E7 // State2=T State1=T State0=T
; 0000 01E8 PORTA=0x00;
;PCODE: $000002BD VOL: 0
;PCODE: $000002BE VOL: 0
; 0000 01E9 DDRA=0x00;
;PCODE: $000002BF VOL: 0
;PCODE: $000002C0 VOL: 0
; 0000 01EA 
; 0000 01EB // Port B initialization
; 0000 01EC // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 01ED // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
; 0000 01EE PORTB=0b00000100;
;PCODE: $000002C1 VOL: 0
;PCODE: $000002C2 VOL: 0
; 0000 01EF DDRB=0b00000100;
;PCODE: $000002C3 VOL: 0
;PCODE: $000002C4 VOL: 0
; 0000 01F0 
; 0000 01F1 // Port D initialization
; 0000 01F2 
; 0000 01F3 PORTD=0x00;
;PCODE: $000002C5 VOL: 0
;PCODE: $000002C6 VOL: 0
; 0000 01F4 DDRD=0b00100000;
;PCODE: $000002C7 VOL: 0
;PCODE: $000002C8 VOL: 0
; 0000 01F5 
; 0000 01F6 // Timer/Counter 0 initialization
; 0000 01F7 // Clock source: System Clock
; 0000 01F8 // Clock value: Timer 0 Stopped
; 0000 01F9 // Mode: Normal top=FFh
; 0000 01FA // OC0A output: Disconnected
; 0000 01FB // OC0B output: Disconnected
; 0000 01FC TCCR0A=0x00;
;PCODE: $000002C9 VOL: 0
;PCODE: $000002CA VOL: 0
; 0000 01FD TCCR0B=0x00;
;PCODE: $000002CB VOL: 0
;PCODE: $000002CC VOL: 0
; 0000 01FE TCNT0=0x00;
;PCODE: $000002CD VOL: 0
;PCODE: $000002CE VOL: 0
; 0000 01FF OCR0A=0x00;
;PCODE: $000002CF VOL: 0
;PCODE: $000002D0 VOL: 0
; 0000 0200 OCR0B=0x00;
;PCODE: $000002D1 VOL: 0
;PCODE: $000002D2 VOL: 0
; 0000 0201 
; 0000 0202 // Timer/Counter 1 initialization
; 0000 0203 // Clock source: System Clock
; 0000 0204 // Clock value: Timer1 Stopped
; 0000 0205 // Mode: Normal top=FFFFh
; 0000 0206 // OC1A output: Discon.
; 0000 0207 // OC1B output: Discon.
; 0000 0208 // Noise Canceler: Off
; 0000 0209 // Input Capture on Falling Edge
; 0000 020A // Timer1 Overflow Interrupt: Off
; 0000 020B // Input Capture Interrupt: Off
; 0000 020C // Compare A Match Interrupt: Off
; 0000 020D // Compare B Match Interrupt: Off
; 0000 020E TCCR1A=0x00;
;PCODE: $000002D3 VOL: 0
;PCODE: $000002D4 VOL: 0
; 0000 020F TCCR1B=0x00;
;PCODE: $000002D5 VOL: 0
;PCODE: $000002D6 VOL: 0
; 0000 0210 TCNT1H=0x00;
;PCODE: $000002D7 VOL: 0
;PCODE: $000002D8 VOL: 0
; 0000 0211 TCNT1L=0x00;
;PCODE: $000002D9 VOL: 0
;PCODE: $000002DA VOL: 0
; 0000 0212 ICR1H=0x00;
;PCODE: $000002DB VOL: 0
;PCODE: $000002DC VOL: 0
; 0000 0213 ICR1L=0x00;
;PCODE: $000002DD VOL: 0
;PCODE: $000002DE VOL: 0
; 0000 0214 OCR1AH=0x00;
;PCODE: $000002DF VOL: 0
;PCODE: $000002E0 VOL: 0
; 0000 0215 OCR1AL=0x00;
;PCODE: $000002E1 VOL: 0
;PCODE: $000002E2 VOL: 0
; 0000 0216 OCR1BH=0x00;
;PCODE: $000002E3 VOL: 0
;PCODE: $000002E4 VOL: 0
; 0000 0217 OCR1BL=0x00;
;PCODE: $000002E5 VOL: 0
;PCODE: $000002E6 VOL: 0
; 0000 0218 
; 0000 0219 // External Interrupt(s) initialization
; 0000 021A // INT0: Off
; 0000 021B // INT1: Off
; 0000 021C // Interrupt on any change on pins PCINT0-7: Off
; 0000 021D GIMSK=0x00;
;PCODE: $000002E7 VOL: 0
;PCODE: $000002E8 VOL: 0
; 0000 021E MCUCR=0x00;
;PCODE: $000002E9 VOL: 0
;PCODE: $000002EA VOL: 0
; 0000 021F 
; 0000 0220 // Timer(s)/Counter(s) Interrupt(s) initialization
; 0000 0221 TIMSK=0x00;
;PCODE: $000002EB VOL: 0
;PCODE: $000002EC VOL: 0
; 0000 0222 
; 0000 0223 // Universal Serial Interface initialization
; 0000 0224 // Mode: Two Wire (I2C)
; 0000 0225 // Clock source: Reg.=ext. pos. edge, Cnt.=USITC
; 0000 0226 // USI Counter Overflow Interrupt: On
; 0000 0227 // USI Start Condition Interrupt: On
; 0000 0228 USICR=0xEA;
;PCODE: $000002ED VOL: 0
;PCODE: $000002EE VOL: 0
; 0000 0229 
; 0000 022A // USART initialization
; 0000 022B // Communication Parameters: 8 Data, 1 Stop, No Parity
; 0000 022C // USART Receiver: Off
; 0000 022D // USART Transmitter: On
; 0000 022E // USART Mode: Asynchronous
; 0000 022F // USART Baud Rate: 9600
; 0000 0230 UCSRA=0x00;
;PCODE: $000002EF VOL: 0
;PCODE: $000002F0 VOL: 0
; 0000 0231 UCSRB=0x08;
;PCODE: $000002F1 VOL: 0
;PCODE: $000002F2 VOL: 0
; 0000 0232 UCSRC=0x06;
;PCODE: $000002F3 VOL: 0
;PCODE: $000002F4 VOL: 0
; 0000 0233 UBRRH=0x00;
;PCODE: $000002F5 VOL: 0
;PCODE: $000002F6 VOL: 0
; 0000 0234 UBRRL=0x33;
;PCODE: $000002F7 VOL: 0
;PCODE: $000002F8 VOL: 0
; 0000 0235 
; 0000 0236 // Analog Comparator initialization
; 0000 0237 // Analog Comparator: Off
; 0000 0238 // Analog Comparator Input Capture by Timer/Counter 1: Off
; 0000 0239 ACSR=0x80;
;PCODE: $000002F9 VOL: 0
;PCODE: $000002FA VOL: 0
; 0000 023A // #asm("sei")
; 0000 023B 
; 0000 023C usi_twi_slave(0b1000000, 0, my_twi_callback, NULL);
;PCODE: $000002FB VOL: 0
;PCODE: $000002FC VOL: 0
;PCODE: $000002FD VOL: 0
;PCODE: $000002FE VOL: 0
;PCODE: $000002FF VOL: 0
;PCODE: $00000300 VOL: 0
;PCODE: $00000301 VOL: 0
;PCODE: $00000302 VOL: 0
;PCODE: $00000303 VOL: 0
; 0000 023D transmit(4);
;PCODE: $00000304 VOL: 0
;PCODE: $00000305 VOL: 0
;PCODE: $00000306 VOL: 0
; 0000 023E while (1)
;PCODE: $00000307 VOL: 0
; 0000 023F       {
; 0000 0240       // Place your code here
; 0000 0241       //uint8_t bu = 8;
; 0000 0242                           //output_buffer = 8;
; 0000 0243       };
;PCODE: $00000308 VOL: 0
;PCODE: $00000309 VOL: 0
; 0000 0244 }
;PCODE: $0000030A VOL: 0
;PCODE: $0000030B VOL: 0
;PCODE: $0000030C VOL: 0
