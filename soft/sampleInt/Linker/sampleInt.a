;/*****************************************************
;This program was produced by the
;CodeWizardAVR V2.04.4a Advanced
;Automatic Program Generator
;© Copyright 1998-2009 Pavel Haiduc, HP InfoTech s.r.l.
;http://www.hpinfotech.com
;
;Project :
;Version :
;Date    : 3/4/2015
;Author  : NeVaDa
;Company : banana-electronics
;Comments:
;
;
;Chip type               : ATtiny2313
;AVR Core Clock frequency: 8.000000 MHz
;Memory model            : Tiny
;External RAM size       : 0
;Data Stack size         : 32
;*****************************************************/
;
;#include <tiny2313.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x20
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x50
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x10
;PCODE: $00000005 VOL: 0
	.EQU __sm_standby=0x40
;PCODE: $00000006 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $00000007 VOL: 0
	#endif
;PCODE: $00000008 VOL: 0
;PCODE: $00000009 VOL: 0
;#include <delay.h>
;
;eeprom unsigned char pwm1;
;
;int delay = 0;
;unsigned char prevPins = 0;
;
;void transmit(char data){
; 0000 001F void transmit(char data){

	.CSEG
;PCODE: $0000000A VOL: 0
;PCODE: $0000000B VOL: 0
; 0000 0020    while(!(UCSRA & (1 << UDRE))){}
;	data -> Y+0
;PCODE: $0000000C VOL: 0
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
; 0000 0021    UDR=data;
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
; 0000 0022 }
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
;
;void transmitInt(int data){
; 0000 0024 void transmitInt(int data){
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
; 0000 0025     int number = 0;
; 0000 0026     char str = '';
; 0000 0027     if(data < 10){
;PCODE: $00000019 VOL: 0
;	data -> Y+4
;	number -> R16,R17
;	str -> R19
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
; 0000 0028        str = data + '0';
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
; 0000 0029        transmit(str);
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
; 0000 002A     }else if(data < 100){
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
; 0000 002B         number = data / 10;
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
; 0000 002C         transmit(number + '0');
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
; 0000 002D         number = data - (number*10);
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
; 0000 002E         transmit(number + '0');
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
; 0000 002F     }else if(data < 1000){
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
; 0000 0030         number = data / 100;
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
; 0000 0031         transmit(number + '0');
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
; 0000 0032         data = data - (number * 100);
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
; 0000 0033         number = data / 10;
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
; 0000 0034         transmit(number + '0');
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
; 0000 0035         number = data - (number*10);
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
; 0000 0036         transmit(number + '0');
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
; 0000 0037     }
; 0000 0038     transmit('\n');
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
; 0000 0039 }
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
;
;void pwmChanged(void){
; 0000 003B void pwmChanged(void){
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
; 0000 003C     int num = 0;
; 0000 003D     pwm1 = delay; //memorize the value
;PCODE: $0000006E VOL: 0
;	num -> R16,R17
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
; 0000 003E 
; 0000 003F     OCR0A = delay*2+1;
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
; 0000 0040     num = delay - ((delay/100)*100);
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
; 0000 0041     OCR0B = (num*255)/99;
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
; 0000 0042 }
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
;
;void incDelay(void){
; 0000 0044 void incDelay(void){
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
; 0000 0045     if(delay < 127){
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
; 0000 0046         delay++;
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
; 0000 0047         transmitInt(delay);
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
; 0000 0048         pwmChanged();
;PCODE: $00000095 VOL: 0
; 0000 0049     }
; 0000 004A }
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
;
;void decDelay(void){
; 0000 004C void decDelay(void){
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
; 0000 004D     if(delay > 0){
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
; 0000 004E         delay--;
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
; 0000 004F         transmitInt(delay);
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
; 0000 0050         pwmChanged();
;PCODE: $000000A2 VOL: 0
; 0000 0051     }
; 0000 0052 }
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
;// Pin change 0-7 interrupt service routine
;interrupt [PC_INT] void pin_change_isr0(void)
; 0000 0055 {
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
; 0000 0056 // Place your code here
; 0000 0057 
; 0000 0058     if((prevPins & (1<<4)) != (PINB & (1<<4))){
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
; 0000 0059         if(!PINB.4){
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
; 0000 005A             if(PINB.3){
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
; 0000 005B                 incDelay();
;PCODE: $000000B5 VOL: 0
; 0000 005C             }else{
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
; 0000 005D                 decDelay();
;PCODE: $000000B8 VOL: 0
; 0000 005E             }
;PCODE: $000000B9 VOL: 0
; 0000 005F         }else{
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
; 0000 0060             if(!PINB.3){
;PCODE: $000000BC VOL: 0
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
; 0000 0061                 incDelay();
;PCODE: $000000BF VOL: 0
; 0000 0062             }else{
;PCODE: $000000C0 VOL: 0
;PCODE: $000000C1 VOL: 0
; 0000 0063                 decDelay();
;PCODE: $000000C2 VOL: 0
; 0000 0064             }
;PCODE: $000000C3 VOL: 0
; 0000 0065         }
;PCODE: $000000C4 VOL: 0
; 0000 0066      }else if((prevPins & (1<<4)) != (PINB & (1<<4))){
;PCODE: $000000C5 VOL: 0
;PCODE: $000000C6 VOL: 0
;PCODE: $000000C7 VOL: 0
;PCODE: $000000C8 VOL: 0
;PCODE: $000000C9 VOL: 0
;PCODE: $000000CA VOL: 0
;PCODE: $000000CB VOL: 0
;PCODE: $000000CC VOL: 0
;PCODE: $000000CD VOL: 0
; 0000 0067          if(!PINB.3){
;PCODE: $000000CE VOL: 0
;PCODE: $000000CF VOL: 0
;PCODE: $000000D0 VOL: 0
; 0000 0068             if(!PINB.4){
;PCODE: $000000D1 VOL: 0
;PCODE: $000000D2 VOL: 0
;PCODE: $000000D3 VOL: 0
; 0000 0069                 incDelay();
;PCODE: $000000D4 VOL: 0
; 0000 006A             }else{
;PCODE: $000000D5 VOL: 0
;PCODE: $000000D6 VOL: 0
; 0000 006B                 decDelay();
;PCODE: $000000D7 VOL: 0
; 0000 006C             }
;PCODE: $000000D8 VOL: 0
; 0000 006D         }else{
;PCODE: $000000D9 VOL: 0
;PCODE: $000000DA VOL: 0
; 0000 006E             if(PINB.4){
;PCODE: $000000DB VOL: 0
;PCODE: $000000DC VOL: 0
;PCODE: $000000DD VOL: 0
; 0000 006F                 incDelay();
;PCODE: $000000DE VOL: 0
; 0000 0070             }else{
;PCODE: $000000DF VOL: 0
;PCODE: $000000E0 VOL: 0
; 0000 0071                 decDelay();
;PCODE: $000000E1 VOL: 0
; 0000 0072             }
;PCODE: $000000E2 VOL: 0
; 0000 0073         }
;PCODE: $000000E3 VOL: 0
; 0000 0074      }
; 0000 0075 
; 0000 0076      prevPins = PINB;
;PCODE: $000000E4 VOL: 0
;PCODE: $000000E5 VOL: 0
;PCODE: $000000E6 VOL: 0
;PCODE: $000000E7 VOL: 0
; 0000 0077 }
;PCODE: $000000E8 VOL: 0
;PCODE: $000000E9 VOL: 0
;PCODE: $000000EA VOL: 0
;
;// Declare your global variables here
;
;void main(void)
; 0000 007C {
;PCODE: $000000EB VOL: 0
; 0000 007D // Declare your local variables here
; 0000 007E 
; 0000 007F // Crystal Oscillator division factor: 1
; 0000 0080 #pragma optsize-
; 0000 0081 CLKPR=0x80;
;PCODE: $000000EC VOL: 0
;PCODE: $000000ED VOL: 0
; 0000 0082 CLKPR=0x00;
;PCODE: $000000EE VOL: 0
;PCODE: $000000EF VOL: 0
; 0000 0083 #ifdef _OPTIMIZE_SIZE_
; 0000 0084 #pragma optsize+
; 0000 0085 #endif
; 0000 0086 
; 0000 0087 // Input/Output Ports initialization
; 0000 0088 // Port A initialization
; 0000 0089 // Func2=In Func1=In Func0=In
; 0000 008A // State2=T State1=T State0=T
; 0000 008B PORTA=0x00;
;PCODE: $000000F0 VOL: 0
;PCODE: $000000F1 VOL: 0
; 0000 008C DDRA=0x00;
;PCODE: $000000F2 VOL: 0
;PCODE: $000000F3 VOL: 0
; 0000 008D 
; 0000 008E // Port B initialization
; 0000 008F // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=Out Func0=Out
; 0000 0090 // State7=T State6=T State5=T State4=T State3=T State2=T State1=1 State0=1
; 0000 0091 PORTB=0b00011011;
;PCODE: $000000F4 VOL: 0
;PCODE: $000000F5 VOL: 0
; 0000 0092 DDRB=0b00000111;
;PCODE: $000000F6 VOL: 0
;PCODE: $000000F7 VOL: 0
; 0000 0093 
; 0000 0094 // Port D initialization
; 0000 0095 // Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 0096 // State6=T State5=T State4=T State3=T State2=T State1=T State0=T
; 0000 0097 PORTD=0x00;
;PCODE: $000000F8 VOL: 0
;PCODE: $000000F9 VOL: 0
; 0000 0098 DDRD=0b00100000;
;PCODE: $000000FA VOL: 0
;PCODE: $000000FB VOL: 0
; 0000 0099 
; 0000 009A // Timer/Counter 0 initialization
; 0000 009B // Clock source: System Clock
; 0000 009C // Clock value: 31.250 kHz
; 0000 009D // Mode: Fast PWM top=FFh
; 0000 009E // OC0A output: Non-Inverted PWM
; 0000 009F // OC0B output: Non-Inverted PWM
; 0000 00A0 TCCR0A=0xA3;
;PCODE: $000000FC VOL: 0
;PCODE: $000000FD VOL: 0
; 0000 00A1 TCCR0B=0x04;
;PCODE: $000000FE VOL: 0
;PCODE: $000000FF VOL: 0
; 0000 00A2 TCNT0=0x00;
;PCODE: $00000100 VOL: 0
;PCODE: $00000101 VOL: 0
; 0000 00A3 OCR0A=0x00;
;PCODE: $00000102 VOL: 0
;PCODE: $00000103 VOL: 0
; 0000 00A4 OCR0B=0x00;
;PCODE: $00000104 VOL: 0
;PCODE: $00000105 VOL: 0
; 0000 00A5 
; 0000 00A6 // Timer/Counter 1 initialization
; 0000 00A7 // Clock source: System Clock
; 0000 00A8 // Clock value: Timer1 Stopped
; 0000 00A9 // Mode: Normal top=FFFFh
; 0000 00AA // OC1A output: Discon.
; 0000 00AB // OC1B output: Discon.
; 0000 00AC // Noise Canceler: Off
; 0000 00AD // Input Capture on Falling Edge
; 0000 00AE // Timer1 Overflow Interrupt: Off
; 0000 00AF // Input Capture Interrupt: Off
; 0000 00B0 // Compare A Match Interrupt: Off
; 0000 00B1 // Compare B Match Interrupt: Off
; 0000 00B2 TCCR1A=0x00;
;PCODE: $00000106 VOL: 0
;PCODE: $00000107 VOL: 0
; 0000 00B3 TCCR1B=0x00;
;PCODE: $00000108 VOL: 0
;PCODE: $00000109 VOL: 0
; 0000 00B4 TCNT1H=0x00;
;PCODE: $0000010A VOL: 0
;PCODE: $0000010B VOL: 0
; 0000 00B5 TCNT1L=0x00;
;PCODE: $0000010C VOL: 0
;PCODE: $0000010D VOL: 0
; 0000 00B6 ICR1H=0x00;
;PCODE: $0000010E VOL: 0
;PCODE: $0000010F VOL: 0
; 0000 00B7 ICR1L=0x00;
;PCODE: $00000110 VOL: 0
;PCODE: $00000111 VOL: 0
; 0000 00B8 OCR1AH=0x00;
;PCODE: $00000112 VOL: 0
;PCODE: $00000113 VOL: 0
; 0000 00B9 OCR1AL=0x00;
;PCODE: $00000114 VOL: 0
;PCODE: $00000115 VOL: 0
; 0000 00BA OCR1BH=0x00;
;PCODE: $00000116 VOL: 0
;PCODE: $00000117 VOL: 0
; 0000 00BB OCR1BL=0x00;
;PCODE: $00000118 VOL: 0
;PCODE: $00000119 VOL: 0
; 0000 00BC 
; 0000 00BD // External Interrupt(s) initialization
; 0000 00BE // INT0: Off
; 0000 00BF // INT1: Off
; 0000 00C0 // Interrupt on any change on pins PCINT0-7: On
; 0000 00C1 GIMSK=0x20;
;PCODE: $0000011A VOL: 0
;PCODE: $0000011B VOL: 0
; 0000 00C2 MCUCR=0x00;
;PCODE: $0000011C VOL: 0
;PCODE: $0000011D VOL: 0
; 0000 00C3 PCMSK=0b00011000;
;PCODE: $0000011E VOL: 0
;PCODE: $0000011F VOL: 0
; 0000 00C4 EIFR=0x20;
;PCODE: $00000120 VOL: 0
;PCODE: $00000121 VOL: 0
; 0000 00C5 
; 0000 00C6 // Timer(s)/Counter(s) Interrupt(s) initialization
; 0000 00C7 TIMSK=0x00;
;PCODE: $00000122 VOL: 0
;PCODE: $00000123 VOL: 0
; 0000 00C8 
; 0000 00C9 // Universal Serial Interface initialization
; 0000 00CA // Mode: Disabled
; 0000 00CB // Clock source: Register & Counter=no clk.
; 0000 00CC // USI Counter Overflow Interrupt: Off
; 0000 00CD USICR=0x00;
;PCODE: $00000124 VOL: 0
;PCODE: $00000125 VOL: 0
; 0000 00CE 
; 0000 00CF // USART initialization
; 0000 00D0 // Communication Parameters: 8 Data, 1 Stop, No Parity
; 0000 00D1 // USART Receiver: Off
; 0000 00D2 // USART Transmitter: On
; 0000 00D3 // USART Mode: Asynchronous
; 0000 00D4 // USART Baud Rate: 9600
; 0000 00D5 UCSRA=0x00;
;PCODE: $00000126 VOL: 0
;PCODE: $00000127 VOL: 0
; 0000 00D6 UCSRB=0x08;
;PCODE: $00000128 VOL: 0
;PCODE: $00000129 VOL: 0
; 0000 00D7 UCSRC=0x06;
;PCODE: $0000012A VOL: 0
;PCODE: $0000012B VOL: 0
; 0000 00D8 UBRRH=0x00;
;PCODE: $0000012C VOL: 0
;PCODE: $0000012D VOL: 0
; 0000 00D9 UBRRL=0x33;
;PCODE: $0000012E VOL: 0
;PCODE: $0000012F VOL: 0
; 0000 00DA 
; 0000 00DB // Analog Comparator initialization
; 0000 00DC // Analog Comparator: Off
; 0000 00DD // Analog Comparator Input Capture by Timer/Counter 1: Off
; 0000 00DE ACSR=0x80;
;PCODE: $00000130 VOL: 0
;PCODE: $00000131 VOL: 0
; 0000 00DF 
; 0000 00E0 // Global enable interrupts
; 0000 00E1 transmitInt(pwm1);
;PCODE: $00000132 VOL: 0
;PCODE: $00000133 VOL: 0
;PCODE: $00000134 VOL: 0
;PCODE: $00000135 VOL: 0
;PCODE: $00000136 VOL: 0
; 0000 00E2 delay = pwm1;
;PCODE: $00000137 VOL: 0
;PCODE: $00000138 VOL: 0
;PCODE: $00000139 VOL: 0
;PCODE: $0000013A VOL: 0
; 0000 00E3 delay++;
;PCODE: $0000013B VOL: 0
;PCODE: $0000013C VOL: 0
;PCODE: $0000013D VOL: 0
; 0000 00E4 transmitInt(pwm1);
;PCODE: $0000013E VOL: 0
;PCODE: $0000013F VOL: 0
;PCODE: $00000140 VOL: 0
;PCODE: $00000141 VOL: 0
;PCODE: $00000142 VOL: 0
; 0000 00E5 transmitInt(0);
;PCODE: $00000143 VOL: 0
;PCODE: $00000144 VOL: 0
;PCODE: $00000145 VOL: 0
; 0000 00E6 transmitInt(0);
;PCODE: $00000146 VOL: 0
;PCODE: $00000147 VOL: 0
;PCODE: $00000148 VOL: 0
; 0000 00E7 pwmChanged();
;PCODE: $00000149 VOL: 0
; 0000 00E8 
; 0000 00E9 
; 0000 00EA #asm("sei")
;PCODE: $0000014A VOL: 0
	sei
;PCODE: $0000014B VOL: 0
; 0000 00EB 
; 0000 00EC while (1)
;PCODE: $0000014C VOL: 0
; 0000 00ED       {
; 0000 00EE       // Place your code here
; 0000 00EF 
; 0000 00F0       #asm("sei");
;PCODE: $0000014D VOL: 0
	sei
;PCODE: $0000014E VOL: 0
; 0000 00F1           delay_ms(delay);
;PCODE: $0000014F VOL: 0
;PCODE: $00000150 VOL: 0
; 0000 00F2          PORTB.0 = !PORTB.0;
;PCODE: $00000151 VOL: 0
;PCODE: $00000152 VOL: 0
;PCODE: $00000153 VOL: 0
;PCODE: $00000154 VOL: 0
;PCODE: $00000155 VOL: 0
;PCODE: $00000156 VOL: 0
;PCODE: $00000157 VOL: 0
;PCODE: $00000158 VOL: 0
;PCODE: $00000159 VOL: 0
;PCODE: $0000015A VOL: 0
; 0000 00F3          delay_ms(delay);
;PCODE: $0000015B VOL: 0
;PCODE: $0000015C VOL: 0
; 0000 00F4          PORTB.1 = !PORTB.1;
;PCODE: $0000015D VOL: 0
;PCODE: $0000015E VOL: 0
;PCODE: $0000015F VOL: 0
;PCODE: $00000160 VOL: 0
;PCODE: $00000161 VOL: 0
;PCODE: $00000162 VOL: 0
;PCODE: $00000163 VOL: 0
;PCODE: $00000164 VOL: 0
;PCODE: $00000165 VOL: 0
;PCODE: $00000166 VOL: 0
; 0000 00F5 
; 0000 00F6 
; 0000 00F7 
; 0000 00F8       };
;PCODE: $00000167 VOL: 0
;PCODE: $00000168 VOL: 0
; 0000 00F9 }
;PCODE: $00000169 VOL: 0
;PCODE: $0000016A VOL: 0
;PCODE: $0000016B VOL: 0
;
